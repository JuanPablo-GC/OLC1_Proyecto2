/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,30],$V2=[1,42],$V3=[1,43],$V4=[1,44],$V5=[1,45],$V6=[1,46],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,35],$Vb=[1,34],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,40],$Vh=[1,41],$Vi=[2,5,36,41,42,43,44,45,80,81,86,88,90,91,92,94,99,102,103,104,105,110],$Vj=[1,52],$Vk=[1,54],$Vl=[33,76],$Vm=[2,76],$Vn=[1,55],$Vo=[1,69],$Vp=[1,68],$Vq=[1,67],$Vr=[1,70],$Vs=[1,71],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,77],$Vy=[1,80],$Vz=[1,78],$VA=[1,79],$VB=[1,81],$VC=[36,37,40,79],$VD=[1,89],$VE=[30,33,76],$VF=[2,129],$VG=[1,116],$VH=[1,115],$VI=[1,117],$VJ=[1,118],$VK=[1,119],$VL=[1,120],$VM=[1,121],$VN=[1,122],$VO=[1,123],$VP=[1,124],$VQ=[1,125],$VR=[1,126],$VS=[1,127],$VT=[1,128],$VU=[30,38,40,46,47,48,49,50,51,61,62,63,64,65,66,67,68,76,80,89,97],$VV=[2,5,36,39,41,42,43,44,45,46,54,55,56,57,58,59,69,71,73,74,75,80,81,86,88,90,91,92,94,99,102,103,104,105,110],$VW=[1,152],$VX=[1,159],$VY=[1,161],$VZ=[38,40,76,80],$V_=[36,39,46,54,55,56,57,58,59,69,71,73,74,75],$V$=[30,38,40,46,47,61,62,63,64,65,66,67,68,76,80,89,97],$V01=[30,38,40,67,68,76,80,89,97],$V11=[40,76],$V21=[30,38,40,46,47,48,49,61,62,63,64,65,66,67,68,76,80,89,97],$V31=[30,38,40,61,62,63,64,65,66,67,68,76,80,89,97],$V41=[30,38,40,65,66,67,68,76,80,89,97],$V51=[1,295],$V61=[1,296],$V71=[80,88,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"VECTOR":7,"DECLARACION":8,"ASIGNACION":9,"SENTENCIA_CASTEO":10,"SENTENCIA_IF":11,"SENTENCIA_SWITCH":12,"SENTENCIA_WHILE":13,"SENTENCIA_FOR":14,"SENTENCIA_DO_WHILE":15,"SENTENCIA_DO_UNTIL":16,"SENTENCIA_RETURN":17,"FUNCION":18,"METODO":19,"SENTENCIA_LLAMADA":20,"SENTENCIA_IMPRIMIR":21,"FUNCION_TYPEOF":22,"FUNCION_TOSTRING":23,"FUNCION_TOCHARARRAY":24,"SENTENCIA_INCREMENTO":25,"SENTENCIA_TRANSFERECIA":26,"SENTENCIA_PUSH":27,"SENTENCIA_POP":28,"SENTENCIA_RUN":29,"punto_coma":30,"TIPO_VARIABLE":31,"LISTA_ID":32,"igual":33,"OPERACION":34,"SENTENCIA_TERNARIA":35,"id":36,"cor_izq":37,"cor_der":38,"par_izq":39,"par_der":40,"string":41,"int":42,"double":43,"boolean":44,"char":45,"menos":46,"mas":47,"por":48,"div":49,"mod":50,"potencia":51,"mas_mas":52,"menos_menos":53,"numero":54,"decimal":55,"cadena":56,"caracter":57,"true":58,"false":59,"LLAMADA_ARITMETICA":60,"mayor":61,"menor":62,"mayor_igual":63,"menor_igual":64,"igual_que":65,"dif_que":66,"and":67,"or":68,"not":69,"punto":70,"length":71,"pop":72,"toLower":73,"toUpper":74,"round":75,"coma":76,"new":77,"PARAMETROS_LLAMADA":78,"llave_izq":79,"llave_der":80,"if":81,"BLOQUE":82,"LISTA_ELIF":83,"else":84,"elif":85,"switch":86,"CASOS":87,"case":88,"dos_puntos":89,"default":90,"while":91,"do":92,"until":93,"for":94,"SENTENCIA_FOR1":95,"SENTENCIA_FOR2":96,"interrogacion2":97,"SENTENCIA_TERNARIA2":98,"return":99,"PARAMETROS_FUNCION":100,"void":101,"print":102,"println":103,"break":104,"continue":105,"typeof":106,"toStringA":107,"toCharArray":108,"push":109,"run":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",30:"punto_coma",33:"igual",36:"id",37:"cor_izq",38:"cor_der",39:"par_izq",40:"par_der",41:"string",42:"int",43:"double",44:"boolean",45:"char",46:"menos",47:"mas",48:"por",49:"div",50:"mod",51:"potencia",52:"mas_mas",53:"menos_menos",54:"numero",55:"decimal",56:"cadena",57:"caracter",58:"true",59:"false",61:"mayor",62:"menor",63:"mayor_igual",64:"menor_igual",65:"igual_que",66:"dif_que",67:"and",68:"or",69:"not",70:"punto",71:"length",72:"pop",73:"toLower",74:"toUpper",75:"round",76:"coma",77:"new",79:"llave_izq",80:"llave_der",81:"if",84:"else",85:"elif",86:"switch",88:"case",89:"dos_puntos",90:"default",91:"while",92:"do",93:"until",94:"for",97:"interrogacion2",99:"return",101:"void",102:"print",103:"println",104:"break",105:"continue",106:"typeof",107:"toStringA",108:"toCharArray",109:"push",110:"run"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[8,3],[8,5],[8,5],[9,4],[9,7],[9,4],[10,8],[31,1],[31,1],[31,1],[31,1],[31,1],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,2],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,4],[34,5],[34,5],[34,4],[34,4],[34,4],[34,4],[32,3],[32,1],[25,3],[25,3],[7,11],[7,10],[7,17],[7,15],[11,8],[11,7],[83,4],[83,8],[83,7],[12,7],[87,5],[87,4],[87,4],[13,7],[15,9],[16,9],[14,10],[95,1],[95,1],[96,2],[96,2],[96,3],[35,5],[98,5],[17,3],[17,2],[18,9],[18,8],[100,4],[100,2],[19,8],[19,9],[19,6],[20,4],[20,5],[60,3],[60,4],[78,3],[78,1],[21,5],[21,5],[26,2],[26,2],[22,8],[23,8],[24,10],[27,7],[28,6],[29,2],[82,1],[82,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 22: case 23: case 24: case 25: case 26: case 76:
 this.$ = $$[$0];
break;
case 27:
controller.listaErrores.push(new errores.default('Error Sintactico','Se esperaba un token distinto',_$[$0-1].first_line, _$[$0-1].first_column));
break;
case 28:
controller.listaErrores.push(new errores.default('Error Sintactico','Se esperaba un token distinto',_$[$0].first_line, _$[$0].first_column));
break;
case 29:
this.$=new declaracion.default($$[$0-1], $$[$0-2], null, _$[$0].first_line, _$[$0].first_column );
break;
case 30: case 31:
this.$=new declaracion.default($$[$0-3], $$[$0-4], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 32: case 34:
this.$=new asignacion.default($$[$0-3], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 33:
this.$ = new ArregloAsignacion.default($$[$0-6],null, $$[$0-4], $$[$0-1], _$[$0-6].first_line,_$[$0-6].first_column)
break;
case 35:
this.$=new Casteo.default($$[$0-7], $$[$0-6], $$[$0-3],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column );
break;
case 36:
this.$= new Tipo.default(Tipo.DataType.CADENA);
break;
case 37:
 this.$=new Tipo.default(Tipo.DataType.ENTERO); 
break;
case 38:
 this.$=new Tipo.default(Tipo.DataType.DECIMAL); 
break;
case 39:
 this.$=new Tipo.default(Tipo.DataType.BOOLEAN); 
break;
case 40:
this.$= new Tipo.default(Tipo.DataType.CARACTER); 
break;
case 41:
this.$= new aritmetico.default(aritmetico.tipoOp.NEGACION,$$[$0],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 42:
this.$= new aritmetico.default(aritmetico.tipoOp.SUMA,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 43:
this.$= new aritmetico.default(aritmetico.tipoOp.RESTA,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 44:
this.$= new aritmetico.default(aritmetico.tipoOp.MULTIPLICACION,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 45:
this.$= new aritmetico.default(aritmetico.tipoOp.DIVISION,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 46:
this.$= new aritmetico.default(aritmetico.tipoOp.MODULO,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 47:
this.$= new aritmetico.default(aritmetico.tipoOp.POTENCIA,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 48:
  this.$ = $$[$0-1]; 
break;
case 49:
 this.$ = new IncreDecre2.default(IncreDecre.tipoOp.INCREMENTO1,$$[$0], _$[$0-1].first_line, _$[$0].first_column); 
break;
case 50:
 this.$ = new IncreDecre2.default(IncreDecre.tipoOp.DECREMENTO1,$$[$0], _$[$0-1].first_line, _$[$0].first_column); 
break;
case 51:
this.$= new Acceso.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 52:
this.$= new nativo.default(new Tipo.default(Tipo.DataType.ENTERO),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 53:
this.$= new nativo.default(new Tipo.default(Tipo.DataType.DECIMAL),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 54:
this.$= new nativo.default(new Tipo.default(Tipo.DataType.CADENA),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 55:
this.$= new nativo.default(new Tipo.default(Tipo.DataType.CARACTER),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 56: case 57:
this.$= new nativo.default(new Tipo.default(Tipo.DataType.BOOLEAN),$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 59:
this.$= new relacional.default(relacional.tipoOp.MAYOR,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 60:
this.$= new relacional.default(relacional.tipoOp.MENOR,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 61:
this.$= new relacional.default(relacional.tipoOp.MAYOR_IGUAL,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 62:
this.$= new relacional.default(relacional.tipoOp.MENOR_IGUAL,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 63:
this.$= new relacional.default(relacional.tipoOp.IGUAL_QUE,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 64:
this.$= new relacional.default(relacional.tipoOp.DIFENTE_QUE,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 65:
this.$= new logica.default(logica.tipoOp.AND,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 66:
this.$= new logica.default(logica.tipoOp.OR,$$[$0-2],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 67:
this.$= new logica.default(logica.tipoOp.NOT,$$[$0],$$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 68:
 this.$ = new ExpresionesArreglo.default($$[$0-3],false,true,$$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 69:
 this.$ = new ExpresionesArreglo.default($$[$0-4],false,false,null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 70:
 this.$ = new ExpresionesArreglo.default($$[$0-4],true,false,null, _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 71:
 this.$ = new ToLower.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 72:
 this.$ = new ToUpper.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = new Length.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = new Redondear.default($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 this.$ = new IncreDecre.default(IncreDecre.tipoOp.INCREMENTO1,$$[$0-2], _$[$0].first_line, _$[$0].first_column); 
break;
case 78:
 this.$ = new IncreDecre.default(IncreDecre.tipoOp.DECREMENTO1,$$[$0-2], _$[$0].first_line, _$[$0].first_column); 
break;
case 79:
this.$ = new Arreglo.default($$[$0-7],$$[$0-4],$$[$0-2],[], _$[$0-6].first_line,_$[$0-6].first_column)
break;
case 80:
this.$ = new Arreglo.default($$[$0-6],$$[$0-3],null,[], _$[$0-5].first_line,_$[$0-5].first_column)
break;
case 83: case 86:
this.$=new Si.default($$[$0-5],$$[$0-2],$$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 84: case 87:
this.$=new Si.default($$[$0-4],$$[$0-1],undefined, _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 85:
this.$=$$[$0-1];
break;
case 92:
this.$ = new mientras.default($$[$0-4],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 93:
this.$ = new HacerMientras.default($$[$0-2],$$[$0-6],_$[$0-7].first_line,_$[$0-7].first_column)
break;
case 94:
this.$ = new HacerHastaQue.default($$[$0-2],$$[$0-6],_$[$0-7].first_line,_$[$0-7].first_column)
break;
case 95:
this.$ = new ForIns.default($$[$0-7],$$[$0-6],$$[$0-4],$$[$0-1], _$[$0-9].first_line,_$[$0-9].first_column);
break;
case 96: case 97:
this.$=$$[$0];
break;
case 98:
 this.$ = new IncreDecre.default(IncreDecre.tipoOp.INCREMENTO1,$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 99:
 this.$ = new IncreDecre.default(IncreDecre.tipoOp.DECREMENTO1,$$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 100:
this.$=new asignacion.default($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column );
break;
case 101:
this.$=new Ternario.default($$[$0-4], $$[$0-2],$$[$0], _$[$0-3].first_line, _$[$0-3].first_column );
break;
case 103:
this.$=new Retornar.default($$[$0-1], _$[$0].first_line, _$[$0].first_column );
break;
case 104:
this.$=new Retornar.default(null, _$[$0].first_line, _$[$0].first_column );
break;
case 105:
this.$=new Funcion.default($$[$0-8], $$[$0-6],$$[$0-1],$$[$0-3], _$[$0-7].first_line, _$[$0-7].first_column );
break;
case 106:
this.$=new Funcion.default($$[$0-7], [],$$[$0-1],$$[$0-3], _$[$0-6].first_line, _$[$0-6].first_column );
break;
case 107:
 $$[$0-3].push($$[$0]); this.$ = $$[$0-3];  
break;
case 108:
 this.$ = [$$[$0]];             
break;
case 109:
this.$=new Metodo.default($$[$0-7],[],$$[$0-1],$$[$0-3], _$[$0-6].first_line, _$[$0-6].first_column );
break;
case 110:
this.$=new Metodo.default($$[$0-8],$$[$0-6],$$[$0-1],$$[$0-3], _$[$0-7].first_line, _$[$0-7].first_column );
break;
case 111:
this.$=new Metodo.default($$[$0-5],[],$$[$0-1],"", _$[$0-4].first_line, _$[$0-4].first_column );
break;
case 112:
this.$=new Llamadas.default($$[$0-3],[],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 113:
this.$=new Llamadas.default($$[$0-4],$$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 116:
    $$[$0-2].push($$[$0]);    this.$ = $$[$0-2];   
break;
case 117:
    this.$ = [$$[$0]];                 
break;
case 118: case 119:
this.$=new impresion.default($$[$0-2],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 120:
this.$=new Transferencia.default(true,false, _$[$0].first_line,_$[$0].first_column);
break;
case 121:
this.$=new Transferencia.default(false,true, _$[$0].first_line,_$[$0].first_column);
break;
case 122:
this.$=new TipoDatoIns.default($$[$0-7], $$[$0-6],$$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column );
break;
case 123:
this.$=new Casteo.default($$[$0-7], $$[$0-6], new Tipo.default(Tipo.DataType.CADENA),$$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column );
break;
case 125:
this.$ = new ArregloAccion.default($$[$0-6],$$[$0-2], true, false, _$[$0-4].first_line,_$[$0-4].first_column)
break;
case 126:
this.$ = new ArregloAccion.default($$[$0-5],null, false, true, _$[$0-3].first_line,_$[$0-3].first_column)
break;
case 127:
this.$ = new Run.default($$[$0],_$[$0-1].first_line,_$[$0-1].first_column)
break;
case 128:
 this.$ = new estados.default($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 129:
 this.$ = new estados.default(new Array(), _$[$0].first_line, _$[$0].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,81:$V7,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{1:[3]},{2:$V0,5:[1,47],6:48,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,81:$V7,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),o($Vi,[2,23]),o($Vi,[2,24]),o($Vi,[2,25]),o($Vi,[2,26]),o($Vi,[2,28],{30:[1,49]}),{32:51,36:$Vj,37:[1,50]},{33:[1,53],76:$Vk},o($Vl,$Vm,{37:$Vn,39:[1,56],52:[1,57],53:[1,58],70:[1,59]}),{39:[1,60]},{39:[1,61]},{39:[1,62]},{39:[1,63]},{79:[1,64]},{30:[1,66],34:65,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{39:[1,82]},{39:[1,83]},{30:[1,84]},{30:[1,85]},{20:86,36:[1,87]},o($VC,[2,36]),o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),o($VC,[2,40]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,27]),{38:[1,88]},{30:$VD,33:[1,90],76:$Vk},o($VE,$Vm),{34:91,35:92,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{36:[1,93]},{34:94,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{31:98,34:99,36:$Vo,39:$Vp,40:[1,96],41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB,78:97,100:95},{30:[1,100]},{30:[1,101]},{72:[1,103],109:[1,102]},{34:104,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:105,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:106,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{8:108,9:109,31:110,32:29,36:[1,111],41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,95:107},{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:112,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{30:[1,114],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($Vi,[2,104]),{34:129,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:130,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},o($VU,[2,51],{37:[1,133],39:[1,135],52:[1,131],53:[1,132],70:[1,134]}),o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),{34:136,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{39:[1,137]},{39:[1,138]},{39:[1,139]},{39:[1,140]},{34:141,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:142,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},o($Vi,[2,120]),o($Vi,[2,121]),o($Vi,[2,127]),{39:[1,143]},{36:[1,144],37:[1,145]},o($VV,[2,29]),{34:146,35:147,36:$Vo,39:[1,148],46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB,106:[1,149],107:[1,150]},{30:[1,151],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,97:$VW},{30:[1,153]},o($VE,[2,75]),{38:[1,154],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{40:[1,155],76:[1,156]},{30:$VX,79:[1,158],89:[1,157]},{40:[1,160],76:$VY},{36:[1,162]},o($VZ,[2,117],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT}),o($Vi,[2,77]),o($Vi,[2,78]),{39:[1,163]},{39:[1,164]},{40:[1,165],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{40:[1,166],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{40:[1,167],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{34:168,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},o($V_,[2,96]),o($V_,[2,97]),{32:169,36:$Vj},o($Vl,$Vm,{37:$Vn}),{80:[1,170]},{2:$V0,6:48,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:[2,128],81:$V7,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},o($Vi,[2,103]),{34:171,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:172,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:173,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:174,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:175,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:176,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:177,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:178,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:179,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:180,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:181,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:182,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:183,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:184,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},o($V$,[2,41],{48:$VI,49:$VJ,50:$VK,51:$VL}),{40:[1,185],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($VU,[2,49]),o($VU,[2,50]),{34:186,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{71:[1,187],72:[1,188]},{34:99,36:$Vo,39:$Vp,40:[1,189],46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB,78:190},o($V01,[2,67],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),{34:191,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:192,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:193,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:194,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{40:[1,195],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{40:[1,196],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{34:99,36:$Vo,39:$Vp,40:[1,197],46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB,78:97},{33:[1,198]},{38:[1,199]},{30:[1,200],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,97:$VW},{30:[1,201]},{31:202,34:130,36:$Vo,39:$Vp,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{39:[1,203]},{39:[1,204]},o($VV,[2,32]),{34:205,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},o($VV,[2,34]),{33:[1,206]},{89:[1,207]},{31:208,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6},{31:209,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,101:[1,210]},{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:211,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},o($Vi,[2,112]),{30:[1,212]},{34:213,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},o($V11,[2,108]),{34:214,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{40:[1,215]},{79:[1,216]},{79:[1,217]},{79:[1,218]},{30:[1,219],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{30:$VD,33:[1,220],76:$Vk},{91:[1,221],93:[1,222]},o($V$,[2,42],{48:$VI,49:$VJ,50:$VK,51:$VL}),o($V$,[2,43],{48:$VI,49:$VJ,50:$VK,51:$VL}),o($V21,[2,44],{50:$VK,51:$VL}),o($V21,[2,45],{50:$VK,51:$VL}),o($V21,[2,46],{50:$VK,51:$VL}),o($V21,[2,47],{50:$VK,51:$VL}),o($V31,[2,59],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL}),o($V31,[2,60],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL}),o($V31,[2,61],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL}),o($V31,[2,62],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL}),o($V41,[2,63],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP}),o($V41,[2,64],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP}),o($V01,[2,65],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR}),o([30,38,40,68,76,80,89,97],[2,66],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS}),o($VU,[2,48]),{38:[1,223],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{39:[1,224]},{39:[1,225]},o($VU,[2,114]),{40:[1,226],76:$VY},{40:[1,227],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{40:[1,228],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{40:[1,229],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{40:[1,230],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{30:[1,231]},{30:[1,232]},{30:$VX},{77:[1,233],108:[1,234]},{36:[1,235]},o($VV,[2,30]),o($VV,[2,31]),{40:[1,236]},{34:237,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:238,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,89:[1,239]},{34:240,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{31:241,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,101:[1,242]},{36:[1,243]},{79:[1,244]},{79:[1,245]},{80:[1,246]},o($Vi,[2,113]),o($VZ,[2,116],{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT}),{40:[1,247],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{30:[1,248]},{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:249,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{87:250,88:[1,251]},{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:252,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{36:[1,254],96:253},{34:146,35:147,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{39:[1,255]},{39:[1,256]},o($VU,[2,68]),{40:[1,257]},{40:[1,258]},o($VU,[2,115]),o($VU,[2,71]),o($VU,[2,72]),o($VU,[2,73]),o($VU,[2,74]),o($Vi,[2,118]),o($Vi,[2,119]),{31:259,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6},{39:[1,260]},{33:[1,261]},{34:262,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{40:[1,263],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{40:[1,264],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{34:265,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{30:[1,266],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{79:[1,267]},{79:[1,268]},o($V11,[2,107]),{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:269,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:270,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},o($Vi,[2,111]),{30:[1,271]},o($Vi,[2,126]),{80:[1,272]},{80:[1,273],88:[1,274],90:[1,275]},{34:276,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{80:[1,277]},{40:[1,278]},{33:[1,281],52:[1,279],53:[1,280]},{34:282,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{34:283,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},o($VU,[2,69]),o($VU,[2,70]),{37:[1,284]},{56:[1,285]},{79:[1,286]},{30:[1,287],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{30:[1,288]},{30:[1,289]},{30:[2,101],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($VV,[2,33]),{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:290,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:291,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{80:[1,292]},{80:[1,293]},o($Vi,[2,125]),o($Vi,[2,84],{83:294,84:$V51,85:$V61}),o($Vi,[2,88]),{34:297,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{89:[1,298]},{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,89:[1,299]},o($Vi,[2,92]),{79:[1,300]},{40:[2,98]},{40:[2,99]},{34:301,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{40:[1,302],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{40:[1,303],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{34:99,36:$Vo,38:[1,305],39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB,78:304},{40:[1,306]},{79:[1,307]},o($Vi,[2,35]),o($Vi,[2,122]),o($Vi,[2,123]),{80:[1,308]},{80:[1,309]},o($Vi,[2,106]),o($Vi,[2,109]),o($Vi,[2,83]),{79:[1,310]},{39:[1,311]},{46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT,89:[1,312]},{2:$V0,4:313,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,81:$V7,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{2:$V0,4:314,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,81:$V7,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:315,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{40:[2,100],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},{30:[1,316]},{30:[1,317]},{38:[1,318],76:$VY},{30:[1,319]},{30:[1,320]},{34:99,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB,78:321,80:[1,322]},o($Vi,[2,105]),o($Vi,[2,110]),{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:323,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{34:324,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB},{2:$V0,4:325,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,81:$V7,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},o($V71,[2,91],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,6:48,2:$V0,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,81:$V7,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh}),o($V71,[2,90],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,6:48,2:$V0,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,81:$V7,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh}),{80:[1,326]},o($Vi,[2,93]),o($Vi,[2,94]),{30:[1,327]},o($Vi,[2,80]),o($Vi,[2,124]),{76:$VY,80:[1,328]},{76:[1,329]},{80:[1,330]},{40:[1,331],46:$VG,47:$VH,48:$VI,49:$VJ,50:$VK,51:$VL,61:$VM,62:$VN,63:$VO,64:$VP,65:$VQ,66:$VR,67:$VS,68:$VT},o($V71,[2,89],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,6:48,2:$V0,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,81:$V7,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh}),o($Vi,[2,95]),o($Vi,[2,79]),{76:[1,332]},{79:[1,333]},o($Vi,[2,85]),{79:[1,334]},{79:[1,335]},{80:[1,336]},{2:$V0,4:113,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:20,24:21,25:22,26:23,27:24,28:25,29:26,31:28,32:29,36:$V1,41:$V2,42:$V3,43:$V4,44:$V5,45:$V6,80:$VF,81:$V7,82:337,86:$V8,91:$V9,92:$Va,94:$Vb,99:$Vc,102:$Vd,103:$Ve,104:$Vf,105:$Vg,110:$Vh},{34:99,36:$Vo,39:$Vp,46:$Vq,54:$Vr,55:$Vs,56:$Vt,57:$Vu,58:$Vv,59:$Vw,60:76,69:$Vx,71:$Vy,73:$Vz,74:$VA,75:$VB,78:338},{80:[1,339]},{80:[1,340]},{76:$VY,80:[1,341]},{30:[1,342]},o($Vi,[2,87],{83:343,84:$V51,85:$V61}),{80:[1,344]},o($Vi,[2,82]),o($Vi,[2,86]),{30:[1,345]},o($Vi,[2,81])],
defaultActions: {47:[2,1],279:[2,98],280:[2,99]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

const controller = require('../../../controller/parser/parser')
    const errores = require('./Exceptions/Error')
  
    //codigo js
    const nativo = require('./Expresions/Native');
    const Tipo = require('./Symbol/Type');
    const impresion = require('./Instructions/imprimir');
    const declaracion = require('./Instructions/Declaracion');
    //const controller = require('../../../controller/parser/parser')
    //const errores = require('./Exceptions/Error')

    const aritmetico=require('./Expresions/Aritmetica');
    const relacional = require('./Expresions/Relacional');
    const logica = require('./Expresions/Logica');
    const asignacion =require('./Instructions/Asignacion');

    
    const Acceso = require('./Expresions/Acceso');
    const Si = require('./Instructions/Si');
    const mientras = require('./Instructions/Mientras'); 
    const estados = require('./Instructions/Estados'); 
    const IncreDecre = require('./Instructions/IncrementoDecremento'); 
    const IncreDecre2 = require('./Expresions/IncreDecre');
    const ForIns = require('./Instructions/ForIns');

    const HacerMientras = require('./Instructions/HacerMientras');
    const Arreglo = require('./Instructions/Arreglo');
    const ExpresionesArreglo = require('./Expresions/ExpresionesArreglo');

    const ArregloAsignacion = require('./Instructions/ArregloAsignacion');
    const ArregloAccion = require('./Instructions/ArregloAccion');
    const HacerHastaQue = require('./Instructions/HacerHastaQue');
    const Ternario = require('./Instructions/Ternario');
    const TernarioInstruccion = require('./Instructions/TernarioInstruccion');
    const Casteo = require('./Instructions/Casteo');
    const TipoDatoIns = require('./Instructions/TipoDatoIns');

    const Funcion = require('./Instructions/Funcion');
    const Llamadas= require('./Instructions/Llamadas');
    const Retornar = require('./Instructions/Retornar');
    const Transferencia = require('./Instructions/Transferencia');
    const Metodo = require('./Instructions/Metodo');
    const Run = require('./Instructions/Run');

    const ToLower= require('./Expresions/ToLower');
    const ToUpper= require('./Expresions/ToUpper');
    const Length = require('./Expresions/Length');
    const Redondear = require('./Expresions/Redondear');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /*se ignoran*/ 
break;
case 1: /*estos caracteres se omiten*/  
break;
case 2: /*estos caracteres se omiten*/  
break;
case 3: /*estos caracteres se omiten*/  
break;
case 4: /*estos caracteres se omiten*/  
break;
case 5:return 41;
break;
case 6:return 42;
break;
case 7:return 43;
break;
case 8:return 45;
break;
case 9:return 44;
break;
case 10:return 101;
break;
case 11:return 110;
break;
case 12:return 77;
break;
case 13:return 109;
break;
case 14:return 72;
break;
case 15:return 73;
break;
case 16:return 74;
break;
case 17:return 75;
break;
case 18:return 71;
break;
case 19:return 106;
break;
case 20:return 107;
break;
case 21:return 108;
break;
case 22:return 81;
break;
case 23:return 85;
break;
case 24:return 84;
break;
case 25:return 58;
break;
case 26:return 59;
break;
case 27:return 86;
break;
case 28:return 88;
break;
case 29:return 90;
break;
case 30:return 91;
break;
case 31:return 92;
break;
case 32:return 93;
break;
case 33:return 94;
break;
case 34:return 'in';
break;
case 35:return 'of';
break;
case 36:return 'Array';
break;
case 37:return 30;
break;
case 38:return 76;
break;
case 39:return 89;
break;
case 40:return 79;
break;
case 41:return 80;
break;
case 42:return 39;
break;
case 43:return 40;
break;
case 44:return 37;
break;
case 45:return 38;
break;
case 46:return 'interrogacion';
break;
case 47:return 97;
break;
case 48:return 70;
break;
case 49:return 52
break;
case 50:return 47;
break;
case 51:return 53
break;
case 52:return 46;
break;
case 53:return 51;
break;
case 54:return 48;
break;
case 55:return 49;
break;
case 56:return 50;
break;
case 57:return 64;
break;
case 58:return 63;
break;
case 59:return 61;
break;
case 60:return 62;
break;
case 61:return 65;
break;
case 62:return 33;
break;
case 63:return 66;
break;
case 64:return 67;
break;
case 65:return 68;
break;
case 66:return 69;
break;
case 67:return 104;
break;
case 68:return 105;
break;
case 69:return 99;
break;
case 70:return 102;
break;
case 71:return 103;
break;
case 72:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 57;
break;
case 73:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 57;
break;
case 74:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 56;
break;
case 75: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 76: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 56; 
break;
case 77:return 55;
break;
case 78:return 54;
break;
case 79:return 36;
break;
case 80:return 5;
break;
case 81:controller.listaErrores.push(new errores.default('Error Lexico', yy_.yytext,yy_.yylineno+1, yy_.yylloc.first_column + 1));
break;
case 82:// return 'INVALID';
break;
case 83://console.log('error lexico ',` linea: ${yy_.yylineno + 1}`, ` El valor "${yy_.yytext}" no es valido, columna: ${yy_.yylloc.first_column + 1}` );
break;
}
},
rules: [/^(?:[ \t\r\n\f]+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:string\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:void\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:if\b)/i,/^(?:elif\b)/i,/^(?:else\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:Array\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:¿)/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:'.{1}')/i,/^(?:".{1}")/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:`[^\`]*`)/i,/^(?:([0-9]+)[\.]([0-9]+))/i,/^(?:[0-9]+)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i,/^(?:)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}